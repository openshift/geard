#!/bin/bash -eu

source "$(dirname $0)/build-support"


function usage() {
  echo "build [-s] [-d|-g] [-i] [-n]"
  echo "-s builds with selinux enabled"
  echo "-d builds/deploys docker systemd service"
  echo "-g builds/deploys geard systemd service"
  echo "-i builds with idler daemon"
  echo "-l builds with vendored packages only (skips go get)"
  echo "-n do not copy binaries into /bin and /sbin location"
  echo "-x disable golang compiler optimizations (for debugging)"
  exit 1
}

# Builds geard in the docker container, tags the image, and
# restarts the geard service in the host.
function build_docker() {
  docker build -rm -t openshift/geard . && sudo systemctl restart geard-image.service
}

function build_geard_service() {
  build_local
  echo ""
  echo "Restart geard.service"
  sudo systemctl enable $(pwd)/contrib/geard.service
  sudo systemctl restart geard.service
  echo "..done"
}

# Build artifact
# Parameters:
#   $1 .. $artifact
#   $2 .. $cc_message
#   $3 .. $version
#   $4 .. $flags
#   $5 .. $tags
function build_artifact() {
  echo ""
  echo "------------------------------------------"
  echo "Building ${1}${2}..."
  echo "------------------------------------------"

  if ! go install -ldflags "-X main.version '$3'" -gcflags "$4" -tags "$5" "github.com/openshift/geard/$1"; then
    echo -e "\n===> FAILED"
    echo -e "\nExiting due to build failures." 1>&2
    exit 2
  else
    echo -e "===> Success"
  fi
}

# Performs a local go install of geard.
function build_local() {
  if ! $skip_go_get; then
    echo "Downloading build dependencies"
    # these packages should not be vendored
    echo " "
    echo "Note: Packages downloaded by go get at this point may need to be vendored."
    go get -v -d -tags "$tags" ./...
    echo "..done"
  fi

  local GOOS=${GOOS:-linux}
  local artifacts=(
    cmd/gear
  )
  if [ "$GOOS" == "linux" ]; then
    artifacts+=(cmd/switchns)
    artifacts+=(ssh/cmd/gear-auth-keys-command)
    artifacts+=(cmd/sti)
  else
    copy_binaries=false
  fi
  local cc_message=" (target: $GOOS)"
  if ! $enable_optimizations; then
    local flags=("-N -l")
  fi

  local version="version $(git describe --abbrev=0 --tags), build $(git rev-parse --short HEAD)"
  for artifact in ${artifacts[@]}; do
    run_job build_artifact "$artifact" "$cc_message" "$version" "${flags[@]:-}" "$tags"
  done
  attach_wait_jobs

  if $copy_binaries; then
    echo ""
    echo "Copying binaries..."

    local bin_dir=../../../../bin
    sudo cp -f ${bin_dir}/gear-auth-keys-command /usr/sbin/
    sudo cp -f ${bin_dir}/switchns /usr/bin
    sudo cp -f ${bin_dir}/gear /usr/bin
    sudo cp -f ${bin_dir}/sti /usr/bin
    sudo chmod +s /usr/bin/switchns

    if $use_selinux; then
      sudo restorecon -v /usr/sbin/gear-auth-keys-command /usr/bin/gear /usr/bin/switchns
    fi

    echo "..done"
  fi

  echo -e "\nBuild completed successfully."
}

# Construct a sane build environment
setup_geard_build_env

# Option parsing
use_selinux=false
handle_systemd=false
build_idler=false
skip_go_get=false
copy_binaries=true
enable_geard_service=false
enable_optimizations=true

while getopts "sdilngx" o; do
  case "${o}" in
    s) use_selinux=true;;
    d) handle_systemd=true;;
    i) build_idler=true;;
    l) skip_go_get=true;;
    n) copy_binaries=false;;
    g) enable_geard_service=true;;
    x) enable_optimizations=false;;
    *) usage;;
  esac
done

tags=""

if $use_selinux; then
  tags="selinux"
fi

if $build_idler; then
  tags="$tags idler"
fi


# Perform the build
if $handle_systemd; then
  build_docker
elif $enable_geard_service; then
  build_geard_service
else
  build_local
fi
